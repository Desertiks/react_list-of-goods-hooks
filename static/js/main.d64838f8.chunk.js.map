{"version":3,"sources":["components/ListOfGoods/ListOfGoods.tsx","App.tsx","index.tsx"],"names":["SortType","ListOfGoods","goodsFromServer","useState","isReversed","setReverse","NONE","sortType","setSortType","reorderedGoods","goods","visibleGoods","sort","good1","good2","LENGTH","length","ALPABET","localeCompare","reverse","getReorderedGoods","className","type","classNames","onClick","current","map","good","App","ReactDOM","render","document","getElementById"],"mappings":"6KAIKA,E,mFAAAA,O,eAAAA,I,qBAAAA,I,oBAAAA,M,KAUE,IAAMC,EAAyB,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBACvC,EAAiCC,oBAAkB,GAAnD,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAAmBH,EAASM,MAA5D,mBAAOC,EAAP,KAAiBC,EAAjB,KA2CMC,EAzCoB,SAACC,GACzB,IAAMC,EAAY,YAAOD,GAmBzB,OAjBIH,IAAaP,EAASM,MACxBK,EAAaC,MAAK,SAACC,EAAOC,GACxB,OAAQP,GACN,KAAKP,EAASe,OACZ,OAAOF,EAAMG,OAASF,EAAME,OAC9B,KAAKhB,EAASiB,QACZ,OAAOJ,EAAMK,cAAcJ,GAC7B,QACE,OAAO,MAKXV,GACFO,EAAaQ,UAGRR,EAqBcS,CAAkBlB,GAEzC,OACE,qCACE,sBAAKmB,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CAAE,WAAYhB,IAAaP,EAASiB,UAEtCO,QA9ByB,WAC/BhB,EAAYR,EAASiB,UAsBjB,iCAYA,wBACEK,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,WAAYhB,IAAaP,EAASe,SAEtCS,QAtCiB,WACvBhB,EAAYR,EAASe,SA8BjB,4BAYA,wBACEO,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,YAA2B,IAAfnB,IAEhBoB,QAzCc,WACpBnB,GAAW,SAAAoB,GAAO,OACfA,MAgCC,sBAYElB,GAAYH,IACZ,wBACEkB,KAAK,SACLD,UAAU,4BACVG,QAvDU,WAClBhB,EAAYR,EAASM,MACrBD,GAAW,IAkDL,sBAWJ,6BACGI,EAAeiB,KAAI,SAAAC,GAAI,OACtB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YC9GrBzB,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGW0B,EAAM,WACjB,OACE,qBAAKP,UAAU,kBAAf,SACE,cAAC,EAAD,CAAanB,gBAAiBA,OCjBpC2B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d64838f8.chunk.js","sourcesContent":["import { FC, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport classNames from 'classnames';\n\nenum SortType {\n  NONE,\n  ALPABET,\n  LENGTH,\n}\n\ntype Props = {\n  goodsFromServer: string[];\n};\n\nexport const ListOfGoods: FC<Props> = ({ goodsFromServer }) => {\n  const [isReversed, setReverse] = useState<boolean>(false);\n  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n\n  const getReorderedGoods = (goods: string[]) => {\n    const visibleGoods = [...goods];\n\n    if (sortType !== SortType.NONE) {\n      visibleGoods.sort((good1, good2) => {\n        switch (sortType) {\n          case SortType.LENGTH:\n            return good1.length - good2.length;\n          case SortType.ALPABET:\n            return good1.localeCompare(good2);\n          default:\n            return 0;\n        }\n      });\n    }\n\n    if (isReversed) {\n      visibleGoods.reverse();\n    }\n\n    return visibleGoods;\n  };\n\n  const handleSortAlphabetically = () => {\n    setSortType(SortType.ALPABET);\n  };\n\n  const handleSortLength = () => {\n    setSortType(SortType.LENGTH);\n  };\n\n  const handleReset = () => {\n    setSortType(SortType.NONE);\n    setReverse(false);\n  };\n\n  const handleReverse = () => {\n    setReverse(current => (\n      !current));\n  };\n\n  const reorderedGoods = getReorderedGoods(goodsFromServer);\n\n  return (\n    <>\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-info',\n            { 'is-light': sortType !== SortType.ALPABET },\n          )}\n          onClick={handleSortAlphabetically}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-success',\n            { 'is-light': sortType !== SortType.LENGTH },\n          )}\n          onClick={handleSortLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-warning',\n            { 'is-light': isReversed !== true },\n          )}\n          onClick={handleReverse}\n        >\n          Reverse\n        </button>\n\n        {(sortType || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={handleReset}\n          >\n            Reset\n          </button>\n        )}\n\n      </div>\n\n      <ul>\n        {reorderedGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>{good}</li>\n        ))}\n      </ul>\n    </>\n  );\n};\n","import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { ListOfGoods } from './components/ListOfGoods/ListOfGoods';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nexport const App = () => {\n  return (\n    <div className=\"section content\">\n      <ListOfGoods goodsFromServer={goodsFromServer} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}